import 'package:common_topdbd/model/season/list_season.dart';
import 'package:common_topdbd/model/those_works/those_works.dart';
import 'package:common_topdbd/named_utility/keys_success_utility.dart';
import 'package:common_topdbd/named_utility/unique_id_by_user_w_season_number_by_season_to_stats_utility.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_bools_ee_where_is_admin_by_role_user_ee_from_bools_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_bools_ee_where_is_test_by_role_user_ee_from_bools_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameters_temp_cache_service_and_stream_subscription/start_listening_and_cancel_listening_ee_bools_ee_where_is_hacked_by_security_ee_from_callback_ee_parameters_temp_cache_service_and_stream_subscription.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameters_temp_cache_service_and_stream_subscription/start_listening_and_cancel_listening_ee_bools_ee_where_is_verified_user_by_verified_user_ee_from_callback_ee_parameters_temp_cache_service_and_stream_subscription.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_creation_time_by_user_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_end_of_season_time_by_season_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_last_login_time_by_last_login_time_user_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_start_of_season_time_by_season_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_matches_lost_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_matches_won_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_rating_points_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_season_number_by_season_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_season_ee_from_list_season_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_code_dbd_by_about_me_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_global_name_by_discord_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_ip_by_ip_address_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_name_country_by_country_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_unique_id_by_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_username_by_discord_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameters_temp_cache_service_and_stream_subscription/start_listening_and_cancel_listening_ee_strings_ee_where_unique_id_by_user_ee_from_callback_ee_parameters_temp_cache_service_and_stream_subscription.dart';
import 'package:library_architecture_mvvm_modify/library_architecture_mvvm_modify.dart';
import 'package:meta/meta.dart';
import 'package:web_topdbd/data_for_named/data_for_app_view/data_for_app_view.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_about_me_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_about_me_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_country_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_country_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_discord_user_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_discord_user_firestore_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_ip_address_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_ip_address_firestore_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_last_login_time_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/update_ee_last_login_time_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_role_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_role_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_season_ee_where_sorting_season_number_order_by_desc_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_list_ee_season_ee_where_not_equals_and_sorting_season_number_order_by_desc_ee_from_season_number_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_stats_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_stats_ee_from_unique_id_by_user_w_season_number_by_season_to_stats_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_http_client_service/operation_ee_ip_address_ee_where_named_ee_from_named_ee_parameter_http_client_service/get_ee_ip_address_ee_where_jsonip_api_ee_parameter_http_client_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/operation_ee_user_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/delete_ee_user_ee_parameter_shared_preferences_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/operation_ee_user_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/get_ee_user_ee_parameter_shared_preferences_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameters_firebase_firestore_service_and_stream_subscription/operation_ee_those_works_ee_where_named_ee_from_named_ee_parameters_firebase_firestore_service_and_stream_subscription/start_listening_and_cancel_listening_ee_those_works_ee_from_callback_ee_parameters_firebase_firestore_service_and_stream_subscription.dart';

@immutable
final class AppViewModel extends BaseNamedViewModel<DataForAppView,DefaultStreamWState<DataForAppView>> {
  // OperationEEModel(EEWhereNamed)[EEFromNamed]EEParameterNamedService
  final _getEEIPAddressFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEEIPAddressFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEEUserEEParameterSharedPreferencesService =
  GetEEUserEEParameterSharedPreferencesService();
  final _getEEDiscordUserFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEEDiscordUserFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService =
  GetEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService();
  final _getEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService =
  GetEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService();
  final _getEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService =
  GetEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService();
  final _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService =
  GetListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService();
  final _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService();
  final _updateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  UpdateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService();
  final _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService();
  final _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService();
  final _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService =
  UpdateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService();
  final _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService =
  UpdateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService();
  final _updateListEESeasonEEFromListSeasonEEParameterTempCacheService =
  UpdateListEESeasonEEFromListSeasonEEParameterTempCacheService();
  final _deleteEEUserEEParameterSharedPreferencesService =
  DeleteEEUserEEParameterSharedPreferencesService();
  final _startListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription();
  final _startListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription();
   final _startListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription();
  final _startListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription();

  // NamedUtility

  AppViewModel() : super(DefaultStreamWState(DataForAppView(true,"",false,"",false,false)));

  @override
  void dispose() {
    super.dispose();
    _startListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription
        .cancelListeningStringsWhereUniqueIdByUserParameterStreamSubscription();
    _startListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription
        .cancelListeningThoseWorksParameterStreamSubscription();
    _startListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription
        .cancelListeningBoolsWhereIsVerifiedUserByVerifiedUserParameterStreamSubscription();
    _startListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription
        .cancelListeningBoolsWhereIsHackedBySecurityParameterStreamSubscription();
  }

  @override
  Future<String> init()
  async {
    final getUserParameterSharedPreferencesService = await _getEEUserEEParameterSharedPreferencesService
        .getUserParameterSharedPreferencesService();
    if(getUserParameterSharedPreferencesService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetUserParameterSharedPreferencesService(getUserParameterSharedPreferencesService.exceptionController);
    }
    final getExceptionInStringWhereIsEmptyParameterUniqueId = getUserParameterSharedPreferencesService
        .parameter
        ?.getExceptionInStringWhereIsEmptyParameterUniqueId ?? "";
    if(getExceptionInStringWhereIsEmptyParameterUniqueId.isNotEmpty) {
      return _firstQQInitQQGetExceptionInStringWhereIsEmptyParameterUniqueId(getExceptionInStringWhereIsEmptyParameterUniqueId);
    }
    final getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEDiscordUserFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController);
    }
    final getIPAddressWhereJsonipAPIParameterHttpClientService = await _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService
        .getIPAddressWhereJsonipAPIParameterHttpClientService();
    if(getIPAddressWhereJsonipAPIParameterHttpClientService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetIPAddressWhereJsonipAPIParameterHttpClientService(getIPAddressWhereJsonipAPIParameterHttpClientService.exceptionController);
    }
    final getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEIPAddressFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController);
    }
    final getExceptionInStringWhereNotEqualsFromIpParameterIp = getIPAddressWhereJsonipAPIParameterHttpClientService
        .parameter
        ?.getExceptionInStringWhereNotEqualsFromIpParameterIp(getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.ip ?? "")
        ?? "";
    if(getExceptionInStringWhereNotEqualsFromIpParameterIp.isNotEmpty) {
      return _firstQQInitQQGetExceptionInStringWhereNotEqualsFromIpParameterIp(getExceptionInStringWhereNotEqualsFromIpParameterIp);
    }
    final getCountryFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getCountryFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetCountryFromUniqueIdByUserParameterFirebaseFirestoreService(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController);
    }
    final getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry = getIPAddressWhereJsonipAPIParameterHttpClientService
        .parameter
        ?.getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? "")
        ?? "";
    if(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry.isNotEmpty) {
      return _firstQQInitQQGetExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry);
    }
    final getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController);
    }
    final getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController);
    }
    final getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService = await _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService
        .getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService();
    if(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.exceptionController);
    }
    final getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService = await _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService
        .getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0);
    if(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.exceptionController);
    }
    final getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService = await _getEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService
        .getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(UniqueIdByUserWSeasonNumberBySeasonToStatsUtility(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "",getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    if(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.exceptionController);
    }
    final updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _updateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQUpdateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController);
    }
    _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereCreationTimeByUserFromDatesTimesParameterTempCacheService(DatesTimes(getUserParameterSharedPreferencesService.parameter?.creationTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereLastLoginTimeByLastLoginTimeUserFromDatesTimesParameterTempCacheService(DatesTimes(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.lastLoginTime ?? DateTime.now()));
    _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUsernameByDiscordUserFromStringsParameterTempCacheService(Strings(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.username ?? ""));
    _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereGlobalNameByDiscordUserFromStringsParameterTempCacheService(Strings(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.globalName ?? ""));
    _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService
        .updateStringsWhereNameCountryByCountryFromStringsParameterTempCacheService(Strings(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? ""));
    _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService
        .updateStringsWhereCodeDBDByAboutMeFromStringsParameterTempCacheService(Strings(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.codeDBD ?? ""));
    _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService
        .updateStringsWhereIpByIPAddressFromStringsParameterTempCacheService(Strings(getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesWonByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesWon ?? 0));
    _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesLostByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesLost ?? 0));
    _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereRatingPointsByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.ratingPoints ?? 0));
    _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService
        .updateIntsWhereSeasonNumberBySeasonFromIntsParameterTempCacheService(Ints(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsAdminByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isAdmin ?? false));
    _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsTestByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isTest ?? false));
    _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereStartOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.startOfSeasonTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereEndOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.endOfSeasonTime ?? DateTime.now()));
    _updateListEESeasonEEFromListSeasonEEParameterTempCacheService
        .updateListSeasonFromListSeasonParameterTempCacheService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.parameter?.getClone ?? ListSeason(List.empty(growable: true)));
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(Strings(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? ""));
    return KeysSuccessUtility.sUCCESS;
  }

  void listeningStreamsTempCacheService() {
    _startListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription
        .startListeningStringsWhereUniqueIdByUserFromCallbackParametersTempCacheServiceAndStreamSubscription((Result<Strings> strings)
    {
      getDataForNamedParameterNamedStreamWState
          .uniqueIdByUser = strings.parameter?.field ?? "";
      notifyStreamDataForNamedParameterNamedStreamWState();
    });
    _startListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription
        .startListeningBoolsWhereIsVerifiedUserByVerifiedUserFromCallbackParametersTempCacheServiceAndStreamSubscription((Result<Bools> bools)
    {
      getDataForNamedParameterNamedStreamWState
          .isNotVerifiedUserByVerifiedUser = !(bools.parameter?.isField ?? false);
      notifyStreamDataForNamedParameterNamedStreamWState();
    });
    _startListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromCallbackEEParametersTempCacheServiceAndStreamSubscription
        .startListeningBoolsWhereIsHackedBySecurityFromCallbackParametersTempCacheServiceAndStreamSubscription((Result<Bools> bools)
    {
      final isField = bools
          .parameter
          ?.isField ?? false;
      if(!isField) {
        return;
      }
      getDataForNamedParameterNamedStreamWState
          .isHackedBySecurity = isField;
      notifyStreamDataForNamedParameterNamedStreamWState();
    });
  }

  void listeningStreamsFirebaseFirestoreService() {
    _startListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription
        .startListeningThoseWorksFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription((Result<ThoseWorks> thoseWorks)
    {
      if(thoseWorks
          .exceptionController
          .isWhereNotEqualsNullParameterException())
      {
        _firstQQListeningStreamsFirebaseFirestoreServiceQQStartListeningThoseWorksFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription(thoseWorks.exceptionController);
        return;
      }
      final isThoseWorks = thoseWorks
          .parameter
          ?.isThoseWorks ?? false;
      if(!isThoseWorks) {
        return;
      }
      getDataForNamedParameterNamedStreamWState
          .isThoseWorks = isThoseWorks;
      notifyStreamDataForNamedParameterNamedStreamWState();
    });
  }

  Future<String> _firstQQInitQQGetUserParameterSharedPreferencesService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetExceptionInStringWhereIsEmptyParameterUniqueId(String getExceptionInStringWhereIsEmptyParameterUniqueId) async {
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(const Strings(""));
    return getExceptionInStringWhereIsEmptyParameterUniqueId;
  }

  Future<String> _firstQQInitQQGetDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetIPAddressWhereJsonipAPIParameterHttpClientService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetCountryFromUniqueIdByUserParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(String getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry) async {
    getDataForNamedParameterNamedStreamWState.otherException = getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry;
    return getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry;
  }

  Future<String> _firstQQInitQQGetRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return  getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQUpdateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return  getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return  getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetExceptionInStringWhereNotEqualsFromIpParameterIp(String getExceptionInStringWhereNotEqualsFromIpParameterIp) async {
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(const Strings(""));
    _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereCreationTimeByUserFromDatesTimesParameterTempCacheService(DatesTimes(DateTime.fromMillisecondsSinceEpoch(0)));
    await _deleteEEUserEEParameterSharedPreferencesService
        .deleteUserParameterSharedPreferencesService();
    return getExceptionInStringWhereNotEqualsFromIpParameterIp;
  }

  Future<String> _firstQQInitQQGetListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(ExceptionController exceptionController) async {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    return getDataForNamedParameterNamedStreamWState.exceptionController.getKeyParameterException;
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQStartListeningThoseWorksFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription(ExceptionController exceptionController) {
    getDataForNamedParameterNamedStreamWState.exceptionController = exceptionController;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }
}