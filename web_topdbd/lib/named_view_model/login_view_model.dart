import 'package:common_topdbd/model/about_me/about_me.dart';
import 'package:common_topdbd/model/country/country.dart';
import 'package:common_topdbd/model/discord_user/discord_user.dart';
import 'package:common_topdbd/model/discord_user_firestore/discord_user_firestore.dart';
import 'package:common_topdbd/model/ip_address/ip_address.dart';
import 'package:common_topdbd/model/ip_address_firestore/ip_address_firestore.dart';
import 'package:common_topdbd/model/last_login_time_user/last_login_time_user.dart';
import 'package:common_topdbd/model/role_user/role_user.dart';
import 'package:common_topdbd/model/season/list_season.dart';
import 'package:common_topdbd/model/season/season.dart';
import 'package:common_topdbd/model/stats/stats.dart';
import 'package:common_topdbd/model/user/user.dart';
import 'package:common_topdbd/model/verified_user/verified_user.dart';
import 'package:common_topdbd/named_utility/unique_id_by_user_w_season_number_by_season_to_stats_utility.dart';
import 'package:common_topdbd/named_utility/ip_to_ip_address_firestore_utility.dart';
import 'package:common_topdbd/named_utility/keys_exception_utility.dart';
import 'package:common_topdbd/named_utility/keys_success_utility.dart';
import 'package:common_topdbd/named_utility/registration_country_utility.dart';
import 'package:common_topdbd/named_utility/registration_discord_user_firestore_utility.dart';
import 'package:common_topdbd/named_utility/registration_ip_address_firestore_utility.dart';
import 'package:common_topdbd/named_utility/registration_stats_utility.dart';
import 'package:common_topdbd/named_utility/registration_verified_user_utility.dart';
import 'package:common_topdbd/named_utility/username_w_global_name_to_discord_user_firestore_utility.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_bools_ee_where_is_admin_by_role_user_ee_from_bools_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_bools_ee_where_is_test_by_role_user_ee_from_bools_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_creation_time_by_user_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_end_of_season_time_by_season_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_last_login_time_by_last_login_time_user_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_start_of_season_time_by_season_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_matches_lost_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_matches_won_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_rating_points_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_season_number_by_season_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_season_ee_from_list_season_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_code_dbd_by_about_me_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_global_name_by_discord_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_ip_by_ip_address_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_name_country_by_country_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_unique_id_by_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_username_by_discord_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:library_architecture_mvvm_modify/library_architecture_mvvm_modify.dart';
import 'package:meta/meta.dart';
import 'package:web_topdbd/data_for_named/data_for_login_view/data_for_login_view.dart';
import 'package:web_topdbd/named_utility/algorithms_utility.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_asset_bundle_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_asset_bundle_service/get_ee_strings_ee_where_terms_of_use_ee_parameter_asset_bundle_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_about_me_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_about_me_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_about_me_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_about_me_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_country_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_country_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_country_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_country_ee_from_registration_country_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_discord_user_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_discord_user_firestore_ee_from_unique_id_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_discord_user_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_discord_user_firestore_ee_from_registration_discord_user_firestore_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_discord_user_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/update_ee_discord_user_firestore_ee_from_username_w_global_name_to_discord_user_firestore_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_ip_address_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_ip_address_firestore_ee_from_registration_ip_address_firestore_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_ip_address_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/update_ee_ip_address_firestore_ee_from_ip_to_ip_address_firestore_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_last_login_time_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_last_login_time_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_last_login_time_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/update_ee_last_login_time_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_role_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_role_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_role_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_role_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_season_ee_where_sorting_season_number_order_by_desc_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_list_ee_season_ee_where_not_equals_and_sorting_season_number_order_by_desc_ee_from_season_number_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_stats_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_stats_ee_from_unique_id_by_user_w_season_number_by_season_to_stats_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_stats_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_stats_ee_from_registration_stats_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_user_ee_from_unique_id_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_user_ee_from_unique_id_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_verified_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/insert_ee_verified_user_ee_from_registration_verified_user_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_http_client_service/operation_ee_discord_user_ee_where_named_ee_from_named_ee_parameter_http_client_service/get_ee_discord_user_ee_where_discord_auth_api_ee_parameter_http_client_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_http_client_service/operation_ee_ip_address_ee_where_named_ee_from_named_ee_parameter_http_client_service/get_ee_ip_address_ee_where_jsonip_api_ee_parameter_http_client_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/operation_ee_user_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/update_ee_user_ee_from_user_ee_parameter_shared_preferences_service.dart';

@immutable
final class LoginViewModel extends BaseNamedViewModel<DataForLoginView,DefaultStreamWState<DataForLoginView>> {
  // OperationEEModel(EEWhereNamed)[EEFromNamed]EEParameterNamedService
  final _getEEStringsEEWhereTermsOfUseEEParameterAssetBundleService =
  GetEEStringsEEWhereTermsOfUseEEParameterAssetBundleService();
  final _getEEDiscordUserEEWhereDiscordAuthAPIEEParameterHttpClientService =
  GetEEDiscordUserEEWhereDiscordAuthAPIEEParameterHttpClientService();
  final _getEEDiscordUserFirestoreEEFromUniqueIdEEParameterFirebaseFirestoreService =
  GetEEDiscordUserFirestoreEEFromUniqueIdEEParameterFirebaseFirestoreService();
  final _getEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService =
  GetEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService();
  final _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService =
  GetEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService();
  final _getEEUserEEFromUniqueIdEEParameterFirebaseFirestoreService =
  GetEEUserEEFromUniqueIdEEParameterFirebaseFirestoreService();
  final _getEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService =
  GetEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService();
  final _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService =
  GetListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService();
  final _insertEECountryEEFromRegistrationCountryUtilityEEParameterFirebaseFirestoreService =
  InsertEECountryEEFromRegistrationCountryUtilityEEParameterFirebaseFirestoreService();
  final _insertEEStatsEEFromRegistrationStatsUtilityEEParameterFirebaseFirestoreService =
  InsertEEStatsEEFromRegistrationStatsUtilityEEParameterFirebaseFirestoreService();
  final _insertEEUserEEFromUniqueIdEEParameterFirebaseFirestoreService =
  InsertEEUserEEFromUniqueIdEEParameterFirebaseFirestoreService();
  final _insertEEDiscordUserFirestoreEEFromRegistrationDiscordUserFirestoreUtilityEEParameterFirebaseFirestoreService =
  InsertEEDiscordUserFirestoreEEFromRegistrationDiscordUserFirestoreUtilityEEParameterFirebaseFirestoreService();
  final _insertEEVerifiedUserEEFromRegistrationVerifiedUserUtilityEEParameterFirebaseFirestoreService =
  InsertEEVerifiedUserEEFromRegistrationVerifiedUserUtilityEEParameterFirebaseFirestoreService();
  final _insertEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  InsertEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _insertEEIPAddressFirestoreEEFromRegistrationIPAddressFirestoreUtilityEEParameterFirebaseFirestoreService =
  InsertEEIPAddressFirestoreEEFromRegistrationIPAddressFirestoreUtilityEEParameterFirebaseFirestoreService();
  final _insertEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  InsertEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _insertEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  InsertEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService();
  final _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService();
  final _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService =
  UpdateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService();
  final _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService =
  UpdateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService();
  final _updateEEDiscordUserFirestoreEEFromUsernameWGlobalNameToDiscordUserFirestoreUtilityEEParameterFirebaseFirestoreService =
  UpdateEEDiscordUserFirestoreEEFromUsernameWGlobalNameToDiscordUserFirestoreUtilityEEParameterFirebaseFirestoreService();
  final _updateEEIPAddressFirestoreEEFromIPToIPAddressFirestoreUtilityEEParameterFirebaseFirestoreService =
  UpdateEEIPAddressFirestoreEEFromIPToIPAddressFirestoreUtilityEEParameterFirebaseFirestoreService();
  final _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService();
  final _updateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  UpdateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _updateEEUserEEFromUserEEParameterSharedPreferencesService =
  UpdateEEUserEEFromUserEEParameterSharedPreferencesService();
  final _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService();
  final _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService();
  final _updateListEESeasonEEFromListSeasonEEParameterTempCacheService =
  UpdateListEESeasonEEFromListSeasonEEParameterTempCacheService();

  // NamedUtility

  LoginViewModel() : super(DefaultStreamWState(DataForLoginView(true,"",false)));

  @override
  Future<String> init()
  async {
    final getStringsWhereTermsOfUseParameterAssetBundleService = await _getEEStringsEEWhereTermsOfUseEEParameterAssetBundleService
        .getStringsWhereTermsOfUseParameterAssetBundleService();
    getDataForNamedParameterNamedStreamWState
        .isLoading = false;
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getStringsWhereTermsOfUseParameterAssetBundleService.exceptionController;
    getDataForNamedParameterNamedStreamWState
        .termsOfUse = getStringsWhereTermsOfUseParameterAssetBundleService.parameter?.field ?? "";
    return KeysSuccessUtility.sUCCESS;
  }

  void setCheckAgreeTermsOfUse(bool? isCheck) {
    getDataForNamedParameterNamedStreamWState.isCheckAgreeTermsOfUse = isCheck ?? false;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  Future<void> signInWithDiscord(Function(String) callbackException)
  async {
    if(getDataForNamedParameterNamedStreamWState.isLoading) {
      return;
    }
    getDataForNamedParameterNamedStreamWState.isLoading = true;
    notifyStreamDataForNamedParameterNamedStreamWState();
    final getDiscordUserWhereDiscordAuthAPIParameterHttpClientService = await _getEEDiscordUserEEWhereDiscordAuthAPIEEParameterHttpClientService
        .getDiscordUserWhereDiscordAuthAPIParameterHttpClientService();
    if(getDiscordUserWhereDiscordAuthAPIParameterHttpClientService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetDiscordUserWhereDiscordAuthAPIParameterHttpClientService(getDiscordUserWhereDiscordAuthAPIParameterHttpClientService,callbackException);
      return;
    }
    final getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService = await _getEEDiscordUserFirestoreEEFromUniqueIdEEParameterFirebaseFirestoreService
        .getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(getDiscordUserWhereDiscordAuthAPIParameterHttpClientService.parameter?.id ?? "");
    if(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService,callbackException,getDiscordUserWhereDiscordAuthAPIParameterHttpClientService.parameter!.getClone);
      return;
    }
    final getExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName = getDiscordUserWhereDiscordAuthAPIParameterHttpClientService
        .parameter
        ?.getExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService.parameter?.username ?? "",getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService.parameter?.globalName ?? "")
        ?? "";
    if(getExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName.isNotEmpty) {
      _firstQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName,callbackException,getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService.parameter!.getClone);
      return;
    }
    final getUserFromUniqueIdParameterFirebaseFirestoreService = await _getEEUserEEFromUniqueIdEEParameterFirebaseFirestoreService
        .getUserFromUniqueIdParameterFirebaseFirestoreService(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueIdByUser ?? "");
    if(getUserFromUniqueIdParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetUserFromUniqueIdParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getIPAddressWhereJsonipAPIParameterHttpClientService = await _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService
        .getIPAddressWhereJsonipAPIParameterHttpClientService();
    if(getIPAddressWhereJsonipAPIParameterHttpClientService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetIPAddressWhereJsonipAPIParameterHttpClientService(getIPAddressWhereJsonipAPIParameterHttpClientService,callbackException);
      return;
    }
    final getCountryFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getCountryFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetCountryFromUniqueIdByUserParameterFirebaseFirestoreService(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry = getIPAddressWhereJsonipAPIParameterHttpClientService
        .parameter
        ?.getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? "")
        ?? "";
    if(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry.isNotEmpty) {
      _firstQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry,callbackException);
      return;
    }
    final getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService = await _updateEEIPAddressFirestoreEEFromIPToIPAddressFirestoreUtilityEEParameterFirebaseFirestoreService
        .updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService(IPToIPAddressFirestoreUtility(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "", getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    if(updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQUpdateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService(updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService = await _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService
        .getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService();
    if(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService = await _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService
        .getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0);
    if(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService = await _getEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService
        .getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(UniqueIdByUserWSeasonNumberBySeasonToStatsUtility(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "",getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    if(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQGetStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _updateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQSignInWithDiscordQQUpdateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    await _updateEEUserEEFromUserEEParameterSharedPreferencesService
        .updateUserFromUserParameterSharedPreferencesService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.getClone ?? User("",DateTime.now()));
    _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereCreationTimeByUserFromDatesTimesParameterTempCacheService(DatesTimes(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.creationTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereLastLoginTimeByLastLoginTimeUserFromDatesTimesParameterTempCacheService(DatesTimes(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.lastLoginTime ?? DateTime.now()));
    _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUsernameByDiscordUserFromStringsParameterTempCacheService(Strings(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService.parameter?.username ?? ""));
    _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereGlobalNameByDiscordUserFromStringsParameterTempCacheService(Strings(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService.parameter?.globalName ?? ""));
    _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService
        .updateStringsWhereNameCountryByCountryFromStringsParameterTempCacheService(Strings(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? ""));
    _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService
        .updateStringsWhereCodeDBDByAboutMeFromStringsParameterTempCacheService(Strings(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.codeDBD ?? ""));
    _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService
        .updateStringsWhereIpByIPAddressFromStringsParameterTempCacheService(Strings(getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesWonByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesWon ?? 0));
    _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesLostByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesLost ?? 0));
    _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereRatingPointsByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.ratingPoints ?? 0));
    _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService
        .updateIntsWhereSeasonNumberBySeasonFromIntsParameterTempCacheService(Ints(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    _updateListEESeasonEEFromListSeasonEEParameterTempCacheService
        .updateListSeasonFromListSeasonParameterTempCacheService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.parameter?.getClone ?? ListSeason(List.empty(growable: true)));
    _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsAdminByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isAdmin ?? false));
    _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsTestByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isTest ?? false));
    _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereStartOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.startOfSeasonTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereEndOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.endOfSeasonTime ?? DateTime.now()));
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(Strings(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? ""));
  }

  void _firstQQSignInWithDiscordQQGetDiscordUserWhereDiscordAuthAPIParameterHttpClientService(Result<DiscordUser> getDiscordUserWhereDiscordAuthAPIParameterHttpClientService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getDiscordUserWhereDiscordAuthAPIParameterHttpClientService.exceptionController.getKeyParameterException);
  }

  Future<void> _firstQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<DiscordUserFirestore> getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService,Function(String) callbackException, DiscordUser getClone)
  async {
    if(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService
        .exceptionController
        .getKeyParameterException == KeysExceptionUtility.uNKNOWN)
    {
      getDataForNamedParameterNamedStreamWState.isLoading = false;
      notifyStreamDataForNamedParameterNamedStreamWState();
      callbackException(getDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
      return;
    }
    final insertUserFromUniqueIdParameterFirebaseFirestoreService =  await _insertEEUserEEFromUniqueIdEEParameterFirebaseFirestoreService
        .insertUserFromUniqueIdParameterFirebaseFirestoreService(AlgorithmsUtility.getStringWhereV1ByUuid);
    if(insertUserFromUniqueIdParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchOneQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertUserFromUniqueIdParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService = await _insertEEDiscordUserFirestoreEEFromRegistrationDiscordUserFirestoreUtilityEEParameterFirebaseFirestoreService
        .insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService(RegistrationDiscordUserFirestoreUtility(getClone.id, insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "", getClone.username, getClone.globalName));
    if(insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchTwoQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final insertVerifiedUserFromRegistrationVerifiedUserUtilityParameterFirebaseFirestoreService =  await _insertEEVerifiedUserEEFromRegistrationVerifiedUserUtilityEEParameterFirebaseFirestoreService
        .insertVerifiedUserFromRegistrationVerifiedUserUtilityParameterFirebaseFirestoreService(RegistrationVerifiedUserUtility(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "", false));
    if(insertVerifiedUserFromRegistrationVerifiedUserUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchThreeQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertVerifiedUserFromRegistrationVerifiedUserUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final insertLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _insertEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .insertLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(insertLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchFourQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getIPAddressWhereJsonipAPIParameterHttpClientService = await _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService
        .getIPAddressWhereJsonipAPIParameterHttpClientService();
    if(getIPAddressWhereJsonipAPIParameterHttpClientService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchFiveQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(getIPAddressWhereJsonipAPIParameterHttpClientService,callbackException);
      return;
    }
    final insertIPAddressFirestoreFromRegistrationIPAddressFirestoreUtilityParameterFirebaseFirestoreService = await _insertEEIPAddressFirestoreEEFromRegistrationIPAddressFirestoreUtilityEEParameterFirebaseFirestoreService
        .insertIPAddressFirestoreFromRegistrationIPAddressFirestoreUtilityParameterFirebaseFirestoreService(RegistrationIPAddressFirestoreUtility(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "", getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    if(insertIPAddressFirestoreFromRegistrationIPAddressFirestoreUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchSixQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertIPAddressFirestoreFromRegistrationIPAddressFirestoreUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final insertCountryFromRegistrationCountryUtilityParameterFirebaseFirestoreService = await _insertEECountryEEFromRegistrationCountryUtilityEEParameterFirebaseFirestoreService
        .insertCountryFromRegistrationCountryUtilityParameterFirebaseFirestoreService(RegistrationCountryUtility(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "", getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.nameCountry ?? ""));
    if(insertCountryFromRegistrationCountryUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchSevenQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertCountryFromRegistrationCountryUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService = await _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService
        .getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService();
    if(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchEightQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final insertAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService = await _insertEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .insertAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(insertAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchNineQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService = await _insertEEStatsEEFromRegistrationStatsUtilityEEParameterFirebaseFirestoreService
        .insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService(RegistrationStatsUtility(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "", getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0, 300));
    if(insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchTenQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _insertEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchElevenQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService = await _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService
        .getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0);
    if(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchTwelveQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService,callbackException);
      return;
    }
    await _updateEEUserEEFromUserEEParameterSharedPreferencesService
        .updateUserFromUserParameterSharedPreferencesService(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.getClone ?? User("",DateTime.now()));
    _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereCreationTimeByUserFromDatesTimesParameterTempCacheService(DatesTimes(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.creationTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereLastLoginTimeByLastLoginTimeUserFromDatesTimesParameterTempCacheService(DatesTimes(insertLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.lastLoginTime ?? DateTime.now()));
    _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUsernameByDiscordUserFromStringsParameterTempCacheService(Strings(insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService.parameter?.username ?? ""));
    _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereGlobalNameByDiscordUserFromStringsParameterTempCacheService(Strings(insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService.parameter?.globalName ?? ""));
    _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService
        .updateStringsWhereNameCountryByCountryFromStringsParameterTempCacheService(Strings(insertCountryFromRegistrationCountryUtilityParameterFirebaseFirestoreService.parameter?.nameCountry ?? ""));
    _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService
        .updateStringsWhereCodeDBDByAboutMeFromStringsParameterTempCacheService(Strings(insertAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.codeDBD ?? ""));
    _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService
        .updateStringsWhereIpByIPAddressFromStringsParameterTempCacheService(Strings(getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesWonByStatsFromIntsParameterTempCacheService(Ints(insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesWon ?? 0));
    _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesLostByStatsFromIntsParameterTempCacheService(Ints(insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesLost ?? 0));
    _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereRatingPointsByStatsFromIntsParameterTempCacheService(Ints(insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService.parameter?.ratingPoints ?? 0));
    _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService
        .updateIntsWhereSeasonNumberBySeasonFromIntsParameterTempCacheService(Ints(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsAdminByRoleUserFromBoolsParameterTempCacheService(Bools(insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isAdmin ?? false));
    _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsTestByRoleUserFromBoolsParameterTempCacheService(Bools(insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isTest ?? false));
    _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereStartOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.startOfSeasonTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereEndOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.endOfSeasonTime ?? DateTime.now()));
    _updateListEESeasonEEFromListSeasonEEParameterTempCacheService
        .updateListSeasonFromListSeasonParameterTempCacheService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.parameter?.getClone ?? ListSeason(List.empty(growable: true)));
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(Strings(insertUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? ""));
  }

  void _firstBranchOneQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<User> insertUserFromUniqueIdParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertUserFromUniqueIdParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchTwoQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<DiscordUserFirestore> insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertDiscordUserFirestoreFromRegistrationDiscordUserFirestoreUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchThreeQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<VerifiedUser> insertVerifiedUserFromRegistrationVerifiedUserUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertVerifiedUserFromRegistrationVerifiedUserUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchFourQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<LastLoginTimeUser> insertLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchFiveQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<IPAddress> getIPAddressWhereJsonipAPIParameterHttpClientService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getIPAddressWhereJsonipAPIParameterHttpClientService.exceptionController.getKeyParameterException);
  }

  void _firstBranchSixQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<IPAddressFirestore> insertIPAddressFirestoreFromRegistrationIPAddressFirestoreUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertIPAddressFirestoreFromRegistrationIPAddressFirestoreUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchSevenQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<Country> insertCountryFromRegistrationCountryUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertCountryFromRegistrationCountryUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchEightQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<Season> getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchNineQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<AboutMe> insertAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchTenQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<Stats> insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertStatsFromRegistrationStatsUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchElevenQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<RoleUser> insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(insertRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  Future<void> _firstQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(String getExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName,Function(String) callbackException, DiscordUserFirestore getClone)
  async {
    final updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService = await _updateEEDiscordUserFirestoreEEFromUsernameWGlobalNameToDiscordUserFirestoreUtilityEEParameterFirebaseFirestoreService
        .updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService(UsernameWGlobalNameToDiscordUserFirestoreUtility(getClone.uniqueId, getClone.uniqueIdByUser, getClone.username, getClone.globalName));
    if(updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchOneQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getUserFromUniqueIdParameterFirebaseFirestoreService = await _getEEUserEEFromUniqueIdEEParameterFirebaseFirestoreService
        .getUserFromUniqueIdParameterFirebaseFirestoreService(updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService.parameter?.uniqueIdByUser ?? "");
    if(getUserFromUniqueIdParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchTwoQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getUserFromUniqueIdParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getIPAddressWhereJsonipAPIParameterHttpClientService = await _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService
        .getIPAddressWhereJsonipAPIParameterHttpClientService();
    if(getIPAddressWhereJsonipAPIParameterHttpClientService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchThreeQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getIPAddressWhereJsonipAPIParameterHttpClientService,callbackException);
      return;
    }
    final getCountryFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getCountryFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchFourQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry = getIPAddressWhereJsonipAPIParameterHttpClientService
        .parameter
        ?.getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? "")
        ?? "";
    if(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry.isNotEmpty) {
      _firstBranchFiveQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry,callbackException);
      return;
    }
    final getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchSixQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService = await _updateEEIPAddressFirestoreEEFromIPToIPAddressFirestoreUtilityEEParameterFirebaseFirestoreService
        .updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService(IPToIPAddressFirestoreUtility(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "", getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    if(updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchSevenQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchEightQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService = await _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService
        .getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService();
    if(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchNineQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService = await _getEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService
        .getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(UniqueIdByUserWSeasonNumberBySeasonToStatsUtility(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "",getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    if(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchTenQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _updateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? "");
    if(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchElevenQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService,callbackException);
      return;
    }
    final getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService = await _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService
        .getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0);
    if(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstBranchTwelveQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService,callbackException);
      return;
    }
    await _updateEEUserEEFromUserEEParameterSharedPreferencesService
        .updateUserFromUserParameterSharedPreferencesService(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.getClone ?? User("",DateTime.now()));
    _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereCreationTimeByUserFromDatesTimesParameterTempCacheService(DatesTimes(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.creationTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereLastLoginTimeByLastLoginTimeUserFromDatesTimesParameterTempCacheService(DatesTimes(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.lastLoginTime ?? DateTime.now()));
    _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUsernameByDiscordUserFromStringsParameterTempCacheService(Strings(updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService.parameter?.username ?? ""));
    _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereGlobalNameByDiscordUserFromStringsParameterTempCacheService(Strings(updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService.parameter?.globalName ?? ""));
    _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService
        .updateStringsWhereNameCountryByCountryFromStringsParameterTempCacheService(Strings(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? ""));
    _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService
        .updateStringsWhereCodeDBDByAboutMeFromStringsParameterTempCacheService(Strings(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.codeDBD ?? ""));
    _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService
        .updateStringsWhereIpByIPAddressFromStringsParameterTempCacheService(Strings(getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesWonByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesWon ?? 0));
    _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesLostByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesLost ?? 0));
    _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereRatingPointsByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.ratingPoints ?? 0));
    _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService
        .updateIntsWhereSeasonNumberBySeasonFromIntsParameterTempCacheService(Ints(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsAdminByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isAdmin ?? false));
    _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsTestByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isTest ?? false));
    _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereStartOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.startOfSeasonTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereEndOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.endOfSeasonTime ?? DateTime.now()));
    _updateListEESeasonEEFromListSeasonEEParameterTempCacheService
        .updateListSeasonFromListSeasonParameterTempCacheService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.parameter?.getClone ?? ListSeason(List.empty(growable: true)));
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(Strings(getUserFromUniqueIdParameterFirebaseFirestoreService.parameter?.uniqueId ?? ""));
  }

  void _firstBranchOneQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<DiscordUserFirestore> updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(updateDiscordUserFirestoreFromUsernameWGlobalNameToDiscordUserFirestoreUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchTwoQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<User> getUserFromUniqueIdParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getUserFromUniqueIdParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchThreeQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<IPAddress> getIPAddressWhereJsonipAPIParameterHttpClientService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getIPAddressWhereJsonipAPIParameterHttpClientService.exceptionController.getKeyParameterException);
  }

  void _firstBranchFourQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<Country> getCountryFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchFiveQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(String getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry);
  }

  void _firstBranchSixQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<RoleUser> getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchSevenQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<IPAddressFirestore> updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchEightQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<AboutMe> getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService, Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchNineQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<Season> getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchTenQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<Stats> getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchElevenQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<LastLoginTimeUser> updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetUserFromUniqueIdParameterFirebaseFirestoreService(Result<User> getUserFromUniqueIdParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getUserFromUniqueIdParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetIPAddressWhereJsonipAPIParameterHttpClientService(Result<IPAddress> getIPAddressWhereJsonipAPIParameterHttpClientService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getIPAddressWhereJsonipAPIParameterHttpClientService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetCountryFromUniqueIdByUserParameterFirebaseFirestoreService(Result<Country> getCountryFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(String getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry);
  }

  void _firstQQSignInWithDiscordQQGetRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(Result<RoleUser> getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService, Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQUpdateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService(Result<IPAddressFirestore> updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(updateIPAddressFirestoreFromIPToIPAddressFirestoreUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(Result<AboutMe> getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService(Result<Season> getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(Result<Stats> getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQUpdateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(Result<LastLoginTimeUser> updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstQQSignInWithDiscordQQGetListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(Result<ListSeason<Season>> getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchTwelveQQSignInWithDiscordQQGetDiscordUserFirestoreFromUniqueIdParameterFirebaseFirestoreService(Result<ListSeason<Season>> getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }

  void _firstBranchTwelveQQSignInWithDiscordQQGetExceptionInStringWhereNotEqualsFromUsernameAndGlobalNameParametersUsernameAndGlobalName(Result<ListSeason<Season>> getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService,Function(String) callbackException) {
    getDataForNamedParameterNamedStreamWState.isLoading = false;
    notifyStreamDataForNamedParameterNamedStreamWState();
    callbackException(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.exceptionController.getKeyParameterException);
  }
}