import 'package:common_topdbd/model/about_me/about_me.dart';
import 'package:common_topdbd/model/country/country.dart';
import 'package:common_topdbd/model/discord_user_firestore/discord_user_firestore.dart';
import 'package:common_topdbd/model/ip_address/ip_address.dart';
import 'package:common_topdbd/model/ip_address_firestore/ip_address_firestore.dart';
import 'package:common_topdbd/model/last_login_time_user/last_login_time_user.dart';
import 'package:common_topdbd/model/role_user/role_user.dart';
import 'package:common_topdbd/model/season/list_season.dart';
import 'package:common_topdbd/model/season/season.dart';
import 'package:common_topdbd/model/stats/stats.dart';
import 'package:common_topdbd/model/those_works/those_works.dart';
import 'package:common_topdbd/model/topdbd_version_web/topdbd_version_web.dart';
import 'package:common_topdbd/model/user/user.dart';
import 'package:common_topdbd/named_utility/unique_id_by_user_w_season_number_by_season_to_stats_utility.dart';
import 'package:common_topdbd/named_utility/keys_name_stream_to_init_stream_utility.dart';
import 'package:common_topdbd/named_utility/keys_name_stream_to_temp_cache_service_utility.dart';
import 'package:common_topdbd/named_utility/keys_success_utility.dart';
import 'package:common_topdbd/named_utility/ready_data_utility.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_bools_ee_where_is_admin_by_role_user_ee_from_bools_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_bools_ee_where_is_test_by_role_user_ee_from_bools_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameters_temp_cache_service_and_stream_subscription/start_listening_and_cancel_listening_ee_bools_ee_where_is_hacked_by_security_ee_from_key_name_stream_and_callback_ee_parameters_temp_cache_service_and_stream_subscription.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameters_temp_cache_service_and_stream_subscription/start_listening_and_cancel_listening_ee_bools_ee_where_is_init_by_init_ee_from_key_name_stream_and_callback_ee_parameters_temp_cache_service_and_stream_subscription.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_bools_ee_where_named_ee_from_named_ee_parameters_temp_cache_service_and_stream_subscription/start_listening_and_cancel_listening_ee_bools_ee_where_is_verified_user_by_verified_user_ee_from_key_name_stream_and_callback_ee_parameters_temp_cache_service_and_stream_subscription.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_country_tc_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_country_tc_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_creation_time_by_user_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_end_of_season_time_by_season_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_last_login_time_by_last_login_time_user_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_dates_times_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_dates_times_ee_where_start_of_season_time_by_season_ee_from_dates_times_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_matches_lost_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_matches_won_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_rating_points_by_stats_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_ints_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_ints_ee_where_season_number_by_season_ee_from_ints_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_maniac_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_maniac_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_maniac_perk_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_maniac_perk_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_maps_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_maps_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_season_ee_from_list_season_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/get_ee_strings_ee_where_version_by_topdbd_version_web_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_code_dbd_by_about_me_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_global_name_by_discord_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_ip_by_ip_address_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_name_country_by_country_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_unique_id_by_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_username_by_discord_user_ee_from_strings_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_ee_strings_ee_where_version_by_topdbd_version_web_ee_parameter_temp_cache_service.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_strings_ee_where_named_ee_from_named_ee_parameters_temp_cache_service_and_stream_subscription/start_listening_and_cancel_listening_ee_strings_ee_where_unique_id_by_user_ee_from_key_name_stream_and_callback_ee_parameters_temp_cache_service_and_stream_subscription.dart';
import 'package:common_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/operation_ee_survivor_perk_ee_where_named_ee_from_named_ee_parameter_temp_cache_service/update_list_ee_survivor_perk_ee_parameter_temp_cache_service.dart';
import 'package:library_architecture_mvvm_modify/library_architecture_mvvm_modify.dart';
import 'package:meta/meta.dart';
import 'package:web_topdbd/data_for_named/data_for_app_view/data_for_app_view.dart';
import 'package:web_topdbd/data_for_named/data_for_app_view/enum_status_notify_list_init_stream.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_about_me_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_about_me_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_country_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_country_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_discord_user_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_discord_user_firestore_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_ip_address_firestore_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_ip_address_firestore_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_last_login_time_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/update_ee_last_login_time_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_role_user_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_role_user_ee_from_unique_id_by_user_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_season_ee_where_sorting_season_number_order_by_desc_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_season_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_list_ee_season_ee_where_not_equals_and_sorting_season_number_order_by_desc_ee_from_season_number_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/operation_ee_stats_ee_where_named_ee_from_named_ee_parameter_firebase_firestore_service/get_ee_stats_ee_from_unique_id_by_user_w_season_number_by_season_to_stats_utility_ee_parameter_firebase_firestore_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_http_client_service/operation_ee_ip_address_ee_where_named_ee_from_named_ee_parameter_http_client_service/get_ee_ip_address_ee_where_jsonip_api_ee_parameter_http_client_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/operation_ee_user_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/delete_ee_user_ee_parameter_shared_preferences_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/operation_ee_user_ee_where_named_ee_from_named_ee_parameter_shared_preferences_service/get_ee_user_ee_parameter_shared_preferences_service.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameters_firebase_firestore_service_and_stream_subscription/operation_ee_those_works_ee_where_named_ee_from_named_ee_parameters_firebase_firestore_service_and_stream_subscription/start_listening_and_cancel_listening_ee_those_works_ee_from_callback_ee_parameters_firebase_firestore_service_and_stream_subscription.dart';
import 'package:web_topdbd/operation_ee_model_ee_where_named_ee_from_named_ee_parameter_named_service/operation_ee_model_ee_where_named_ee_from_named_ee_parameters_firebase_firestore_service_and_stream_subscription/operation_ee_topdbd_version_web_ee_where_named_ee_from_named_ee_parameters_firebase_firestore_service_and_stream_subscription/start_listening_and_cancel_listening_ee_topdbd_version_web_ee_from_callback_ee_parameters_firebase_firestore_service_and_stream_subscription.dart';

@immutable
final class AppViewModel extends BaseNamedViewModel<DataForAppView,DefaultStreamWState<DataForAppView>> {
  // OperationEEModel(EEWhereNamed)[EEFromNamed]EEParameterNamedService
  final _getEEIPAddressFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEEIPAddressFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEEUserEEParameterSharedPreferencesService =
  GetEEUserEEParameterSharedPreferencesService();
  final _getEEStringsEEWhereVersionByTOPDBDVersionWebEEParameterTempCacheService =
  GetEEStringsEEWhereVersionByTOPDBDVersionWebEEParameterTempCacheService();
  final _getEEDiscordUserFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEEDiscordUserFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService =
  GetEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService();
  final _getEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  GetEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService =
  GetEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService();
  final _getEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService =
  GetEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService();
  final _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService =
  GetListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService();
  final _updateEEStringsEEWhereVersionByTOPDBDVersionWebEEParameterTempCacheService =
  UpdateEEStringsEEWhereVersionByTOPDBDVersionWebEEParameterTempCacheService();
  final _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService();
  final _updateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService =
  UpdateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService();
  final _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService();
  final _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService();
  final _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService =
  UpdateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService();
  final _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService();
  final _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService =
  UpdateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService();
  final _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService =
  UpdateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService();
  final _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService =
  UpdateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService();
  final _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService =
  UpdateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService();
  final _updateListEESurvivorPerkEEParameterTempCacheService =
  UpdateListEESurvivorPerkEEParameterTempCacheService();
  final _updateListEEMapsEEParameterTempCacheService =
  UpdateListEEMapsEEParameterTempCacheService();
  final _updateListEEManiacEEParameterTempCacheService =
  UpdateListEEManiacEEParameterTempCacheService();
  final _updateListEEManiacPerkEEParameterTempCacheService =
  UpdateListEEManiacPerkEEParameterTempCacheService();
  final _updateListEECountryTCEEParameterTempCacheService =
  UpdateListEECountryTCEEParameterTempCacheService();
  final _updateListEESeasonEEFromListSeasonEEParameterTempCacheService =
  UpdateListEESeasonEEFromListSeasonEEParameterTempCacheService();
  final _deleteEEUserEEParameterSharedPreferencesService =
  DeleteEEUserEEParameterSharedPreferencesService();
  final _startListeningAndCancelListeningEEBoolsEEWhereIsInitByInitEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEBoolsEEWhereIsInitByInitEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription();
  final _startListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription();
  final _startListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription();
  final _startListeningAndCancelListeningEETOPDBDVersionWebEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription =
  StartListeningAndCancelListeningEETOPDBDVersionWebEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription();
  final _startListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription();
  final _startListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription =
  StartListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription();

  // NamedUtility

  AppViewModel() : super(DefaultStreamWState(DataForAppView(ReadyDataUtility.getListInitStream,"",EnumStatusNotifyListInitStream.noNotify,false,false,"","",false,false)));

  @override
  void dispose() {
    super.dispose();
    _startListeningAndCancelListeningEEBoolsEEWhereIsInitByInitEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .cancelListeningBoolsWhereIsInitByInitParameterStreamSubscription();
    _startListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .cancelListeningStringsWhereUniqueIdByUserParameterStreamSubscription();
    _startListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription
        .cancelListeningThoseWorksParameterStreamSubscription();
    _startListeningAndCancelListeningEETOPDBDVersionWebEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription
        .cancelListeningTOPDBDVersionWebParameterStreamSubscription();
    _startListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .cancelListeningBoolsWhereIsVerifiedUserByVerifiedUserParameterStreamSubscription();
    _startListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .cancelListeningBoolsWhereIsHackedBySecurityParameterStreamSubscription();
  }

  @override
  Future<String> init()
  async {
    final updateListSurvivorPerkParameterTempCacheService = _updateListEESurvivorPerkEEParameterTempCacheService
        .updateListSurvivorPerkParameterTempCacheService();
    if(updateListSurvivorPerkParameterTempCacheService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQUpdateListSurvivorPerkParameterTempCacheService(updateListSurvivorPerkParameterTempCacheService);
    }
    final updateListMapsParameterTempCacheService = _updateListEEMapsEEParameterTempCacheService
        .updateListMapsParameterTempCacheService();
    if(updateListMapsParameterTempCacheService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQUpdateListMapsParameterTempCacheService(updateListMapsParameterTempCacheService);
    }
    final updateListManiacParameterTempCacheService = _updateListEEManiacEEParameterTempCacheService
        .updateListManiacParameterTempCacheService();
    if(updateListManiacParameterTempCacheService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQUpdateListManiacParameterTempCacheService(updateListManiacParameterTempCacheService);
    }
    final updateListManiacPerkParameterTempCacheService = _updateListEEManiacPerkEEParameterTempCacheService
        .updateListManiacPerkParameterTempCacheService();
    if(updateListManiacPerkParameterTempCacheService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQUpdateListManiacPerkParameterTempCacheService(updateListManiacPerkParameterTempCacheService);
    }
    final updateListCountryTCParameterTempCacheService = _updateListEECountryTCEEParameterTempCacheService
        .updateListCountryTCParameterTempCacheService();
    if(updateListCountryTCParameterTempCacheService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQUpdateListCountryTCParameterTempCacheService(updateListCountryTCParameterTempCacheService);
    }
    final getUserParameterSharedPreferencesService = await _getEEUserEEParameterSharedPreferencesService
        .getUserParameterSharedPreferencesService();
    if(getUserParameterSharedPreferencesService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetUserParameterSharedPreferencesService(getUserParameterSharedPreferencesService);
    }
    final getExceptionInStringWhereIsEmptyParameterUniqueId = getUserParameterSharedPreferencesService
        .parameter
        ?.getExceptionInStringWhereIsEmptyParameterUniqueId ?? "";
    if(getExceptionInStringWhereIsEmptyParameterUniqueId.isNotEmpty) {
      return _firstQQInitQQGetExceptionInStringWhereIsEmptyParameterUniqueId(getExceptionInStringWhereIsEmptyParameterUniqueId);
    }
    final getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEDiscordUserFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService);
    }
    final getIPAddressWhereJsonipAPIParameterHttpClientService = await _getEEIPAddressEEWhereJsonipAPIEEParameterHttpClientService
        .getIPAddressWhereJsonipAPIParameterHttpClientService();
    if(getIPAddressWhereJsonipAPIParameterHttpClientService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetIPAddressWhereJsonipAPIParameterHttpClientService(getIPAddressWhereJsonipAPIParameterHttpClientService);
    }
    final getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEIPAddressFirestoreEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService);
    }
    final getExceptionInStringWhereNotEqualsFromIpParameterIp = getIPAddressWhereJsonipAPIParameterHttpClientService
        .parameter
        ?.getExceptionInStringWhereNotEqualsFromIpParameterIp(getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.ip ?? "")
        ?? "";
    if(getExceptionInStringWhereNotEqualsFromIpParameterIp.isNotEmpty) {
      return _firstQQInitQQGetExceptionInStringWhereNotEqualsFromIpParameterIp(getExceptionInStringWhereNotEqualsFromIpParameterIp);
    }
    final getCountryFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEECountryEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getCountryFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetCountryFromUniqueIdByUserParameterFirebaseFirestoreService(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService);
    }
    final getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry = getIPAddressWhereJsonipAPIParameterHttpClientService
        .parameter
        ?.getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? "")
        ?? "";
    if(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry.isNotEmpty) {
      return _firstQQInitQQGetExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry);
    }
    final getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEERoleUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService);
    }
    final getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService = await _getEEAboutMeEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService);
    }
    final getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService = await _getEESeasonEEWhereSortingSeasonNumberOrderByDescEEParameterFirebaseFirestoreService
        .getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService();
    if(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService);
    }
    final getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService = await _getListEESeasonEEWhereNotEqualsAndSortingSeasonNumberOrderByDescEEFromSeasonNumberEEParameterFirebaseFirestoreService
        .getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0);
    if(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService);
    }
    final getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService = await _getEEStatsEEFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityEEParameterFirebaseFirestoreService
        .getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(UniqueIdByUserWSeasonNumberBySeasonToStatsUtility(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "",getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    if(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQGetStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService);
    }
    final updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService = await _updateEELastLoginTimeUserEEFromUniqueIdByUserEEParameterFirebaseFirestoreService
        .updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? "");
    if(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      return _firstQQInitQQUpdateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService);
    }
    _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereCreationTimeByUserFromDatesTimesParameterTempCacheService(DatesTimes(getUserParameterSharedPreferencesService.parameter?.creationTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereLastLoginTimeByLastLoginTimeUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereLastLoginTimeByLastLoginTimeUserFromDatesTimesParameterTempCacheService(DatesTimes(updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.lastLoginTime ?? DateTime.now()));
    _updateEEStringsEEWhereUsernameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUsernameByDiscordUserFromStringsParameterTempCacheService(Strings(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.username ?? ""));
    _updateEEStringsEEWhereGlobalNameByDiscordUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereGlobalNameByDiscordUserFromStringsParameterTempCacheService(Strings(getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.globalName ?? ""));
    _updateEEStringsEEWhereNameCountryByCountryEEFromStringsEEParameterTempCacheService
        .updateStringsWhereNameCountryByCountryFromStringsParameterTempCacheService(Strings(getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.nameCountry ?? ""));
    _updateEEStringsEEWhereCodeDBDByAboutMeEEFromStringsEEParameterTempCacheService
        .updateStringsWhereCodeDBDByAboutMeFromStringsParameterTempCacheService(Strings(getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.codeDBD ?? ""));
    _updateEEStringsEEWhereIpByIPAddressEEFromStringsEEParameterTempCacheService
        .updateStringsWhereIpByIPAddressFromStringsParameterTempCacheService(Strings(getIPAddressWhereJsonipAPIParameterHttpClientService.parameter?.ip ?? ""));
    _updateEEIntsEEWhereMatchesWonByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesWonByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesWon ?? 0));
    _updateEEIntsEEWhereMatchesLostByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereMatchesLostByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.matchesLost ?? 0));
    _updateEEIntsEEWhereRatingPointsByStatsEEFromIntsEEParameterTempCacheService
        .updateIntsWhereRatingPointsByStatsFromIntsParameterTempCacheService(Ints(getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.parameter?.ratingPoints ?? 0));
    _updateEEIntsEEWhereSeasonNumberBySeasonEEFromIntsEEParameterTempCacheService
        .updateIntsWhereSeasonNumberBySeasonFromIntsParameterTempCacheService(Ints(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.seasonNumber ?? 0));
    _updateEEBoolsEEWhereIsAdminByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsAdminByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isAdmin ?? false));
    _updateEEBoolsEEWhereIsTestByRoleUserEEFromBoolsEEParameterTempCacheService
        .updateBoolsWhereIsTestByRoleUserFromBoolsParameterTempCacheService(Bools(getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.parameter?.isTest ?? false));
    _updateEEDatesTimesEEWhereStartOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereStartOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.startOfSeasonTime ?? DateTime.now()));
    _updateEEDatesTimesEEWhereEndOfSeasonTimeBySeasonEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereEndOfSeasonTimeBySeasonFromDatesTimesParameterTempCacheService(DatesTimes(getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.parameter?.endOfSeasonTime ?? DateTime.now()));
    _updateListEESeasonEEFromListSeasonEEParameterTempCacheService
        .updateListSeasonFromListSeasonParameterTempCacheService(getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.parameter?.getClone ?? ListSeason(List.empty(growable: true)));
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(Strings(getUserParameterSharedPreferencesService.parameter?.uniqueId ?? ""));
    return KeysSuccessUtility.sUCCESS;
  }

  void listeningStreamsTempCacheService() {
    _startListeningAndCancelListeningEEStringsEEWhereUniqueIdByUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .startListeningStringsWhereUniqueIdByUserFromKeyNameStreamAndCallbackParametersTempCacheServiceAndStreamSubscription(KeysNameStreamToTempCacheServiceUtility.stringsQQUniqueIdByUser,(Result<Strings> strings)
    {
      getDataForNamedParameterNamedStreamWState
          .uniqueIdByUser = strings.parameter?.field ?? "";
      final isInitStream = getDataForNamedParameterNamedStreamWState
          .listInitStream
          .getInitStreamFromNameStreamParameterListModel(KeysNameStreamToInitStreamUtility.appViewModelQQStringsUniqueIdByUser)
          .isInitStream;
      if(isInitStream) {
        _firstQQListeningStreamsTempCacheServiceQQIsInitStream();
        return;
      }
      getDataForNamedParameterNamedStreamWState
          .listInitStream
          .updateFromNameStreamAndIsInitStreamParameterListModel(KeysNameStreamToInitStreamUtility.appViewModelQQStringsUniqueIdByUser,true);
      final isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
          .isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      if(isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream) {
        _firstQQListeningStreamsTempCacheServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
        return;
      }
    });
    _startListeningAndCancelListeningEEBoolsEEWhereIsVerifiedUserByVerifiedUserEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .startListeningBoolsWhereIsVerifiedUserByVerifiedUserFromKeyNameStreamAndCallbackParametersTempCacheServiceAndStreamSubscription(KeysNameStreamToTempCacheServiceUtility.boolsQQIsVerifiedUserByVerifiedUser, (Result<Bools> bools)
    {
      getDataForNamedParameterNamedStreamWState
          .isNotVerifiedUserByVerifiedUser = !(bools.parameter?.isField ?? false);
      notifyStreamDataForNamedParameterNamedStreamWState();
    });
    _startListeningAndCancelListeningEEBoolsEEWhereIsHackedBySecurityEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .startListeningBoolsWhereIsHackedBySecurityFromKeyNameStreamAndCallbackParametersTempCacheServiceAndStreamSubscription(KeysNameStreamToTempCacheServiceUtility.boolsQQIsHackedBySecurity,(Result<Bools> bools)
    {
      getDataForNamedParameterNamedStreamWState
          .isHackedBySecurity = bools.parameter?.isField ?? false;
      notifyStreamDataForNamedParameterNamedStreamWState();
    });
    _startListeningAndCancelListeningEEBoolsEEWhereIsInitByInitEEFromKeyNameStreamAndCallbackEEParametersTempCacheServiceAndStreamSubscription
        .startListeningBoolsWhereIsInitByInitFromKeyNameStreamAndCallbackParametersTempCacheServiceAndStreamSubscription(KeysNameStreamToTempCacheServiceUtility.boolsQQIsInitByInit,(Result<Bools> bools)
    {
      getDataForNamedParameterNamedStreamWState
          .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.infinityNotify;
    });
  }

  void listeningStreamsFirebaseFirestoreService() {
    final updateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService = _updateEEStringsEEWhereVersionByTOPDBDVersionWebEEParameterTempCacheService
        .updateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService();
    if(updateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQListeningStreamsFirebaseFirestoreServiceQQUpdateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService(updateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService);
      return;
    }
    final getStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService = _getEEStringsEEWhereVersionByTOPDBDVersionWebEEParameterTempCacheService
        .getStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService();
    if(getStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService
        .exceptionController
        .isWhereNotEqualsNullParameterException())
    {
      _firstQQListeningStreamsFirebaseFirestoreServiceQQGetStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService(getStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService);
      return;
    }
    _startListeningAndCancelListeningEEThoseWorksEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription
        .startListeningThoseWorksFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription((Result<ThoseWorks> thoseWorks)
    {
      if(thoseWorks
          .exceptionController
          .isWhereNotEqualsNullParameterException())
      {
        _firstQQListeningStreamsFirebaseFirestoreServiceQQStartListeningThoseWorksFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription(thoseWorks);
        return;
      }
      getDataForNamedParameterNamedStreamWState
          .isThoseWorks = thoseWorks.parameter?.isThoseWorks ?? false;
      final isInitStream = getDataForNamedParameterNamedStreamWState
          .listInitStream
          .getInitStreamFromNameStreamParameterListModel(KeysNameStreamToInitStreamUtility.appViewModelQQThoseWorks)
          .isInitStream;
      if(isInitStream) {
        _firstQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream();
        return;
      }
      getDataForNamedParameterNamedStreamWState
          .listInitStream
          .updateFromNameStreamAndIsInitStreamParameterListModel(KeysNameStreamToInitStreamUtility.appViewModelQQThoseWorks,true);
      final isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
          .isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      if(isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream) {
        _firstQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
        return;
      }
    });
    _startListeningAndCancelListeningEETOPDBDVersionWebEEFromCallbackEEParametersFirebaseFirestoreServiceAndStreamSubscription
        .startListeningTOPDBDVersionWebFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription((Result<TOPDBDVersionWeb> tOPDBDVersionWeb)
    {
      if(tOPDBDVersionWeb
          .exceptionController
          .isWhereNotEqualsNullParameterException())
      {
        _firstQQListeningStreamsFirebaseFirestoreServiceQQStartListeningTOPDBDVersionWebFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription(tOPDBDVersionWeb);
        return;
      }
      final getStringWhereNotEqualsFromVersionParameterVersion = tOPDBDVersionWeb
          .parameter
          ?.getExceptionInStringWhereNotEqualsFromVersionParameterVersion(getStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService.parameter?.field ?? "") ?? "";
      if(getStringWhereNotEqualsFromVersionParameterVersion.isNotEmpty) {
        _firstQQListeningStreamsFirebaseFirestoreServiceQQGetStringWhereNotEqualsFromVersionParameterVersion(tOPDBDVersionWeb.parameter ?? const TOPDBDVersionWeb(""));
        return;
      }
      getDataForNamedParameterNamedStreamWState.isNotValidVersionTOPDBDVersionWeb = false;
      getDataForNamedParameterNamedStreamWState.versionByTOPDBDVersionWeb = tOPDBDVersionWeb.parameter?.version ?? "";
      final isInitStream = getDataForNamedParameterNamedStreamWState
          .listInitStream
          .getInitStreamFromNameStreamParameterListModel(KeysNameStreamToInitStreamUtility.appViewModelQQTOPDBDVersionWeb)
          .isInitStream;
      if(isInitStream) {
        _secondQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream();
        return;
      }
      getDataForNamedParameterNamedStreamWState
          .listInitStream
          .updateFromNameStreamAndIsInitStreamParameterListModel(KeysNameStreamToInitStreamUtility.appViewModelQQTOPDBDVersionWeb,true);
      final isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream4 = getDataForNamedParameterNamedStreamWState
          .isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      if(isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream4) {
        _secondQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
        return;
      }
    });
  }

  void notifyStreamDataForAppView() {
    final isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
    if(isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream) {
      _firstQQNotifyStreamDataForAppViewQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      return;
    }
  }

  Future<String> _firstQQInitQQUpdateListSurvivorPerkParameterTempCacheService(Result<bool> updateListSurvivorPerkParameterTempCacheService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = updateListSurvivorPerkParameterTempCacheService.exceptionController;
    return updateListSurvivorPerkParameterTempCacheService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQUpdateListMapsParameterTempCacheService(Result<bool> updateListMapsParameterTempCacheService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = updateListMapsParameterTempCacheService.exceptionController;
    return updateListMapsParameterTempCacheService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQUpdateListManiacParameterTempCacheService(Result<bool> updateListManiacParameterTempCacheService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = updateListManiacParameterTempCacheService.exceptionController;
    return updateListManiacParameterTempCacheService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQUpdateListManiacPerkParameterTempCacheService(Result<bool> updateListManiacPerkParameterTempCacheService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = updateListManiacPerkParameterTempCacheService.exceptionController;
    return updateListManiacPerkParameterTempCacheService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQUpdateListCountryTCParameterTempCacheService(Result<bool> updateListCountryTCParameterTempCacheService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = updateListCountryTCParameterTempCacheService.exceptionController;
    return updateListCountryTCParameterTempCacheService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetUserParameterSharedPreferencesService(Result<User> getUserParameterSharedPreferencesService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getUserParameterSharedPreferencesService.exceptionController;
    return getUserParameterSharedPreferencesService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetExceptionInStringWhereIsEmptyParameterUniqueId(String getExceptionInStringWhereIsEmptyParameterUniqueId)
  async {
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(const Strings(""));
    return getExceptionInStringWhereIsEmptyParameterUniqueId;
  }

  Future<String> _firstQQInitQQGetDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(Result<DiscordUserFirestore> getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController;
    return getDiscordUserFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetIPAddressWhereJsonipAPIParameterHttpClientService(Result<IPAddress> getIPAddressWhereJsonipAPIParameterHttpClientService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getIPAddressWhereJsonipAPIParameterHttpClientService.exceptionController;
    return getIPAddressWhereJsonipAPIParameterHttpClientService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetCountryFromUniqueIdByUserParameterFirebaseFirestoreService(Result<Country> getCountryFromUniqueIdByUserParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController;
    return getCountryFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry(String getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry)
  async {
    getDataForNamedParameterNamedStreamWState
        .otherException = getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry;
    return getExceptionInStringWhereNotEqualsFromNameCountryParameterNameCountry;
  }

  Future<String> _firstQQInitQQGetRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService(Result<RoleUser> getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController;
    return getRoleUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService(Result<AboutMe> getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController;
    return getAboutMeFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService(Result<Season> getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.exceptionController;
    return getSeasonWhereSortingSeasonNumberOrderByDescParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService(Result<Stats> getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.exceptionController;
    return getStatsFromUniqueIdByUserWSeasonNumberBySeasonToStatsUtilityParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQUpdateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService(Result<LastLoginTimeUser> updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController;
    return updateLastLoginTimeUserFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService(Result<IPAddressFirestore> getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController;
    return getIPAddressFirestoreFromUniqueIdByUserParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  Future<String> _firstQQInitQQGetExceptionInStringWhereNotEqualsFromIpParameterIp(String getExceptionInStringWhereNotEqualsFromIpParameterIp)
  async {
    _updateEEStringsEEWhereUniqueIdByUserEEFromStringsEEParameterTempCacheService
        .updateStringsWhereUniqueIdByUserFromStringsParameterTempCacheService(const Strings(""));
    _updateEEDatesTimesEEWhereCreationTimeByUserEEFromDatesTimesEEParameterTempCacheService
        .updateDatesTimesWhereCreationTimeByUserFromDatesTimesParameterTempCacheService(DatesTimes(DateTime.fromMillisecondsSinceEpoch(0)));
    await _deleteEEUserEEParameterSharedPreferencesService
        .deleteUserParameterSharedPreferencesService();
    return getExceptionInStringWhereNotEqualsFromIpParameterIp;
  }

  Future<String> _firstQQInitQQGetListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService(Result<ListSeason<Season>> getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService)
  async {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.exceptionController;
    return getListSeasonWhereNotEqualsAndSortingSeasonNumberOrderByDescFromSeasonNumberParameterFirebaseFirestoreService.exceptionController.getKeyParameterException;
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQUpdateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService(Result<bool> updateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService) {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = updateStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService.exceptionController;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQStartListeningThoseWorksFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription(Result<ThoseWorks> thoseWorks) {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = thoseWorks.exceptionController;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQStartListeningTOPDBDVersionWebFromCallbackParametersFirebaseFirestoreServiceAndStreamSubscription(Result<TOPDBDVersionWeb> tOPDBDVersionWeb) {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = tOPDBDVersionWeb.exceptionController;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQGetStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService(Result<Strings> getStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService) {
    getDataForNamedParameterNamedStreamWState
        .exceptionController = getStringsWhereVersionByTOPDBDVersionWebParameterTempCacheService.exceptionController;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQGetStringWhereNotEqualsFromVersionParameterVersion(TOPDBDVersionWeb tOPDBDVersionWeb) {
    getDataForNamedParameterNamedStreamWState
        .isNotValidVersionTOPDBDVersionWeb = true;
    getDataForNamedParameterNamedStreamWState
        .versionByTOPDBDVersionWeb = tOPDBDVersionWeb.version;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsTempCacheServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    final isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream();
    if(isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream) {
      _firstBranchOneQQListeningStreamsTempCacheServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      return;
    }
    getDataForNamedParameterNamedStreamWState
        .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.oneNotify;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    final isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream();
    if(isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream) {
      _firstBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      return;
    }
    getDataForNamedParameterNamedStreamWState
        .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.oneNotify;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _secondQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    final isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream();
    if(isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream) {
      _secondBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      return;
    }
    getDataForNamedParameterNamedStreamWState
        .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.oneNotify;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsTempCacheServiceQQIsInitStream() {
    final isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
    if(isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream) {
      _firstBranchOneQQListeningStreamsTempCacheServiceQQIsInitStream();
      return;
    }
  }

  void _firstBranchOneQQListeningStreamsTempCacheServiceQQIsInitStream() {
    final isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream();
    if(isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream) {
      _firstBranchOneBranchOneQQListeningStreamsTempCacheServiceQQIsInitStream();
      return;
    }
    getDataForNamedParameterNamedStreamWState
        .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.oneNotify;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream() {
    final isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
    if(isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream) {
      _firstBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream();
      return;
    }
  }

  void _firstBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream() {
    final isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream();
    if(isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream) {
      _firstBranchOneBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream();
      return;
    }
    getDataForNamedParameterNamedStreamWState
        .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.oneNotify;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _secondQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream() {
    final isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
    if(isWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream) {
      _secondBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream();
      return;
    }
  }

  void _secondBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream() {
    final isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream();
    if(isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream) {
      _secondBranchOneBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream();
      return;
    }
    getDataForNamedParameterNamedStreamWState
        .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.oneNotify;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstQQNotifyStreamDataForAppViewQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    final isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream = getDataForNamedParameterNamedStreamWState
        .isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream();
    if(isWhereEqualsInfinityNotifyParameterEnumStatusNotifyListInitStream) {
      _firstBranchOneQQNotifyStreamDataForAppViewQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream();
      return;
    }
    getDataForNamedParameterNamedStreamWState
        .enumStatusNotifyListInitStream = EnumStatusNotifyListInitStream.oneNotify;
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstBranchOneBranchOneQQListeningStreamsTempCacheServiceQQIsInitStream() {
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstBranchOneBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream() {
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _secondBranchOneBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsInitStream() {
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstBranchOneQQNotifyStreamDataForAppViewQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstBranchOneQQListeningStreamsTempCacheServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _firstBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    notifyStreamDataForNamedParameterNamedStreamWState();
  }

  void _secondBranchOneQQListeningStreamsFirebaseFirestoreServiceQQIsWhereTrueAndNotEqualsOneNotifyParametersListInitStreamAndEnumStatusNotifyListInitStream() {
    notifyStreamDataForNamedParameterNamedStreamWState();
  }
}